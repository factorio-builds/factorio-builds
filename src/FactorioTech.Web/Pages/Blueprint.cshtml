@page "/{user}/{slug}/{hash?}"
@model BlueprintModel
@using Humanizer

@inject SignInManager<User> SignInManager

<div class="container blueprint">
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item">
                <a asp-page="/User" asp-route-user="@Model.Blueprint.Owner!.UserName">@Model.Blueprint.Owner!.UserName</a>
            </li>
            <li class="breadcrumb-item active" aria-current="page">
                <a asp-page="/Blueprint" asp-route-user="@Model.Blueprint.Owner!.UserName" asp-route-slug="@Model.Blueprint.Slug" asp-route-hash="@null">
                    @Model.Blueprint.Slug
                </a>
            </li>
            <li class="ml-auto">
                <form method="post" asp-page-handler="Favorite" data-ajax="true" data-ajax-update="#favorites-count">
                    <div class="btn-group ml-2" role="group">
                        <button type="submit" class="btn btn-sm btn-default">
                            <i class="fas fa-heart"></i>
                            Favorite
                        </button>
                        <button id="favorites-count" type="button" class="btn btn-sm btn-default" disabled>@Model.Blueprint.FollowerCount</button>
                    </div>
                    <input type="hidden" name="BlueprintId" value="@Model.Blueprint.BlueprintId" />
                    <input type="hidden" name="Current" value="@Model.Blueprint.FollowerCount" />
                </form>
            </li>
            @if (SignInManager.IsSignedIn(User) && User.GetUserId() == Model.Blueprint.OwnerId)
            {
                <li>
                    <div class="btn-group ml-2" role="group">
                        <button type="button" class="btn btn-sm btn-default" data-toggle="modal" data-target="#import-modal-version">
                            <i class="fas fa-cloud-upload-alt"></i>
                            Add versionâ€¦
                        </button>
                        <button type="button" class="btn btn-sm btn-default">
                            <i class="fas fa-wrench"></i>
                            Edit
                        </button>
                    </div>
                </li>
            }
            <li>
                <div class="btn-group ml-2" role="group">
                    <a class="btn btn-sm btn-default"
                       data-toggle="tooltip" data-placement="top" title="View the raw blueprint string">
                        <i class="fas fa-file-alt"></i>
                        Raw
                    </a>
                    <button type="button" class="btn btn-sm btn-success"
                            data-toggle="tooltip" data-placement="top" title="Copy the blueprint string to your clipboard">
                        <i class="fas fa-copy"></i>
                        Copy to clipboard
                    </button>
                </div>
            </li>
        </ol>
    </nav>

    <partial name="_StatusMessage" model="Model.StatusMessage" />

    <div class="row mb-4">
        <div class="col-md-8">
            <h1 class="display-4">@Model.Blueprint.Title</h1>
            <small class="text-muted">
                by <a asp-page="/User" asp-route-user="@Model.Blueprint.Owner.UserName">@Model.Blueprint.Owner.DisplayName</a>
                &bull; created @Model.Blueprint.CreatedAt.InZone(User.GetTimeZone()).ToDateTimeOffset().Humanize()
                @if (Model.Blueprint.CreatedAt != Model.Blueprint.UpdatedAt)
                {
                    <text>&bull; updated @Model.Blueprint.UpdatedAt.InZone(User.GetTimeZone()).ToDateTimeOffset().Humanize()</text>
                }
                &bull; Game version: <strong>@Model.SelectedVersion.GameVersion.ToString(3)</strong>
            </small>
            @if (Model.Blueprint.Tags?.Any() == true)
            {
                <p class="pt-2">
                    @foreach (var tag in Model.Blueprint.Tags)
                    {
                        <a class="badge badge-secondary"
                           asp-page="/Index" asp-route-tags="@tag">
                            @tag
                        </a>
                    }
                </p>
            }

            @if (Model.Blueprint.Description != null)
            {
                <markdown>@Model.Blueprint.Description</markdown>
            }

            <details>
                <summary>Version History</summary>
                <ul class="list-group list-group-flush">
                    @foreach (var version in Model.Versions!)
                    {
                        <li class="list-group-item">
                            <h5 class="mb-0">
                                <a asp-page="/Blueprint" asp-route-user="@Model.Blueprint.Owner.UserName"
                                   asp-route-slug="@Model.Blueprint.Slug" asp-route-hash="@version.Hash">
                                    @(version.Name ?? version.Hash.ToString())
                                </a>
                                @if (version.VersionId == Model.SelectedVersion.VersionId)
                                {
                                    <text>(selected version)</text>
                                }
                            </h5>
                            <small class="text-muted">Created @version.CreatedAt.InZone(User.GetTimeZone()).ToDateTimeOffset().Humanize()</small>
                            @if (version.Description != null)
                            {
                                <p>@version.Description</p>
                            }
                        </li>
                    }
                </ul>
            </details>
        </div>
        <div class="col-md-4">
            <img src="@Uris.BlueprintCover(Model.Blueprint.BlueprintId)" class="img-thumbnail" loading="lazy" />
        </div>
    </div>
</div>

<partial name="_ImportModal" model="Model.ImportInput" />

@(
    await Html.RenderComponentAsync<BlueprintEnvelope>(RenderMode.Static, new {
        VersionId = Model.SelectedVersion.VersionId,
        Envelope = Model.Envelope,
        PayloadCache = Model.PayloadCache,
    })
)

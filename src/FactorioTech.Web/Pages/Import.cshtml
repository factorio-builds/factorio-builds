@page
@model ImportModel

<div class="container import-blueprint">
    <h1 class="display-4">Import Blueprint</h1>

    <partial name="_StatusMessage" model="Model.StatusMessage" />

    @if (Model.BlueprintString == null)
    {
        <form method="post">
            <div asp-validation-summary="ModelOnly"></div>

            <p>Paste your blueprint string in the text area below.</p>
            <div class="form-group">
                <textarea asp-for="ImportInput.BlueprintString" class="form-control text-monospace" rows="16"></textarea>
                <span asp-validation-for="ImportInput.BlueprintString"></span>
            </div>
            <button type="submit" class="btn btn-primary">Continue</button>
        </form>
    }
    else
    {
        <form method="post" enctype="multipart/form-data">
            <div asp-validation-summary="ModelOnly"></div>

            <div class="row">
                <div class="col-md-8">
                    <div class="form-group">
                        <label asp-for="CreateInput.Slug"></label>
                        <div class="input-group mb-3">
                            <div class="input-group-prepend">
                                <span class="input-group-text text-monospace" id="slug-username-addon">https://factorio.tech/@User.GetUserName()/</span>
                            </div>
                            <input asp-for="CreateInput.Slug" class="form-control text-monospace" aria-describedby="slug-username-addon" 
                                   readonly="@Model.ParentBlueprintId.HasValue"
                                   data-toggle="@(Model.ParentBlueprintId.HasValue ? "tooltip" : null)" data-title="You can't change the slug at this time." />
                        </div>
                        <span asp-validation-for="CreateInput.Slug" class="text-danger"></span>
                    </div>

                    <div class="form-group">
                        <label asp-for="CreateInput.Title"></label>
                        <input asp-for="CreateInput.Title" class="form-control" />
                        <span asp-validation-for="CreateInput.Title" class="text-danger"></span>
                    </div>

                    <div class="form-group">
                        <label asp-for="CreateInput.Tags"></label>
                        <select asp-for="CreateInput.Tags" multiple="multiple" style="display:none" placeholder="Select at least one tag…"
                                data-role="blueprint-tags" asp-items="@Model.TagsSelectItems">
                        </select>
                        <span asp-validation-for="CreateInput.Tags" class="text-danger"></span>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group mb-0">
                        <label for="blueprint-image-input">
                            @{ var imageSrc = Model.ParentBlueprintId.HasValue ? Url.BlueprintCover(Model.ParentBlueprintId.Value) : null; }
                            <img src="@imageSrc" class="img-thumbnail" id="blueprint-image-selected"
                                 data-toggle="tooltip" data-placement="bottom"
                                 title="Click here to upload a different image or select a blueprint rendering from the blueprint contents below!" />
                        </label>
                        <input asp-for="CreateInput.Image.Uploaded" type="file" id="blueprint-image-input" class="sr-only" accept="image/*" />
                        <input asp-for="CreateInput.Image.Hash" type="hidden" id="blueprint-image-hash" />
                        <input asp-for="CreateInput.Image.X" type="hidden" id="blueprint-image-x" />
                        <input asp-for="CreateInput.Image.Y" type="hidden" id="blueprint-image-y" />
                        <input asp-for="CreateInput.Image.W" type="hidden" id="blueprint-image-w" />
                        <input asp-for="CreateInput.Image.H" type="hidden" id="blueprint-image-h" />
                    </div>
                </div>
            </div>

            <div class="form-group">
                <label asp-for="CreateInput.Description" class="mb-0"></label>
                <small class="form-text text-muted mb-2">
                    You can use <a href="https://guides.github.com/features/mastering-markdown" title="Mastering Markdown" target="_blank">Markdown</a>
                    to format the blueprint description.
                </small>
                <div class="tab-content">
                    <div class="tab-pane fade show active" id="blueprint-description-editor-content" role="tabpanel"
                         aria-labelledby="blueprint-description-editor-tab">
                        <input asp-for="CreateInput.Description" id="blueprint-description" type="hidden" />
                        <div id="blueprint-description-ace">@Model.CreateInput.Description</div>
                    </div>
                    <div class="tab-pane fade" id="blueprint-description-preview-content" role="tabpanel"
                         aria-labelledby="blueprint-description-preview-tab">
                        <markdown>CreateInput.Description</markdown>
                    </div>
                </div>
                <ul class="nav small justify-content-end" role="tablist">
                    <li class="nav-item" role="presentation">
                        <a class="nav-link active" id="blueprint-description-editor-tab" href="#blueprint-description-editor-content" role="tab"
                            data-toggle="tab" aria-controls="blueprint-description-editor-content" aria-selected="true">
                            Source
                        </a>
                    </li>
                    <li class="nav-item" role="presentation">
                        <a class="nav-link" id="blueprint-description-preview-tab" href="#blueprint-description-preview-content" role="tab"
                            data-toggle="tab" aria-controls="blueprint-description-preview-content" aria-selected="false">
                            Preview
                        </a>
                    </li>
                </ul>
                <span asp-validation-for="CreateInput.Description" class="text-danger"></span>
            </div>

            <h2 class="border-bottom pb-2 pt-4">Version Details</h2>

            <div class="row">
                <div class="col-8">
                    <div class="form-group">
                        <label asp-for="CreateInput.VersionName"></label>
                        <input asp-for="CreateInput.VersionName" class="form-control" />
                        <span asp-validation-for="CreateInput.VersionName" class="text-danger"></span>
                    </div>

                    <div class="form-group">
                        <label asp-for="CreateInput.VersionDescription"></label>
                        <textarea asp-for="CreateInput.VersionDescription" class="form-control" rows="4"></textarea>
                        <span asp-validation-for="CreateInput.VersionDescription" class="text-danger"></span>
                    </div>
                </div>
                <div class="col-4">
                    <h4>Version naming suggestions</h4>
                    <p>
                        It’s common practice to prefix your version names with the letter <code>v</code>.
                        Some good version names might be <code>v1.0</code> or <code>v2.3.4</code>.
                    </p>

                    <h4>Semantic versioning</h4>
                    <p>
                        If you’re new to releasing software (or blueprints), we highly recommend reading about
                        <a href="https://semver.org/" target="_blank" title="Semantic Versioning">semantic versioning</a>.
                    </p>
                </div>
            </div>

            <button type="submit" asp-page-handler="Create" class="btn btn-primary">Publish new blueprint</button>
        </form>

        <h2 class="pt-4">Blueprint Content</h2>
    }

    @if (Model.Envelope != null)
    {
        @(
            await Html.RenderComponentAsync<BlueprintEnvelope>(RenderMode.Static, new {
                VersionId = Guid.Empty,
                Envelope = Model.Envelope,
                PayloadCache = Model.PayloadCache,
            })
        )
    }
</div>

<partial name="_CropperModal" />

@section Scripts {
    <partial name="_ValidationScripts" />
    <partial name="_EditFormScripts" />
}

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/assets/icon/{size}/{type}/{key}.png": {
    get: {
      parameters: {
        path: {
          /**
           * The desired size. Valid values are `64`, `32`, `16` and `8`
           */
          size: number
          /**
           * The icon type
           */
          type: "Item" | "Virtual"
          /**
           * The item's or signal's name
           */
          key: string
        }
      }
      responses: {
        /**
         * The requested game icon
         */
        "200": {
          "image/png": string
        }
        /**
         * The request is malformed or invalid
         */
        "400": {
          "image/png": components["schemas"]["ProblemDetails"]
        }
        /**
         * The requested icon does not exist
         */
        "404": {
          "image/png": components["schemas"]["ProblemDetails"]
        }
      }
    }
  }
  "/builds": {
    get: {
      parameters: {
        query: {
          /**
           * The desired page
           */
          page?: number
          /**
           * The desired field to sort the results
           */
          sort_field?: "Title" | "Created" | "Updated" | "Favorites"
          /**
           * The desired direction to sort the results
           */
          sort_direction?: "Asc" | "Desc"
          /**
           * An optional search term to filter the results by
           */
          q?: string
          /**
           * An optional comma-separated list of tags to filter the results by
           */
          tags?: string
          /**
           * An optional game version to filter the results by
           */
          version?: string
        }
      }
      responses: {
        /**
         * The paged, filtered and ordered list of matching builds
         */
        "200": {
          "application/json": components["schemas"]["BuildsModel"]
        }
        /**
         * The request is malformed or invalid
         */
        "400": {
          "application/json": components["schemas"]["ProblemDetails"]
        }
        /**
         * Not Found
         */
        "404": {
          "application/json": components["schemas"]["ProblemDetails"]
        }
      }
    }
    post: {
      requestBody: {
        "application/json": components["schemas"]["CreateBuildRequest"]
        "text/json": components["schemas"]["CreateBuildRequest"]
        "application/*+json": components["schemas"]["CreateBuildRequest"]
      }
      responses: {
        /**
         * Success
         */
        "201": {
          "application/json": components["schemas"]["ThinBuildModel"]
        }
        /**
         * Bad Request
         */
        "400": {
          "application/json": components["schemas"]["ProblemDetails"]
        }
        /**
         * Unauthorized
         */
        "401": unknown
        /**
         * Forbidden
         */
        "403": unknown
      }
    }
  }
  "/builds/{owner}/{slug}": {
    get: {
      parameters: {
        path: {
          /**
           * The username of the desired build's owner
           */
          owner: string
          /**
           * The slug of the desired build
           */
          slug: string
        }
      }
      responses: {
        /**
         * The details of the requested build
         */
        "200": {
          "application/json": components["schemas"]["FullBuildModel"]
        }
        /**
         * The request is malformed or invalid
         */
        "400": {
          "application/json": components["schemas"]["ProblemDetails"]
        }
        /**
         * The requested build does not exist
         */
        "404": {
          "application/json": components["schemas"]["ProblemDetails"]
        }
      }
    }
  }
  "/builds/{owner}/{slug}/followers": {
    get: {
      parameters: {
        path: {
          /**
           * The username of the desired build's owner
           */
          owner: string
          /**
           * The slug of the desired build
           */
          slug: string
        }
      }
      responses: {
        /**
         * An ordered list of followers
         */
        "200": {
          "application/json": components["schemas"]["UsersModel"]
        }
        /**
         * The request is malformed or invalid
         */
        "400": {
          "application/json": components["schemas"]["ProblemDetails"]
        }
        /**
         * The requested build does not exist
         */
        "404": {
          "application/json": components["schemas"]["ProblemDetails"]
        }
      }
    }
  }
  "/builds/{owner}/{slug}/versions": {
    get: {
      parameters: {
        path: {
          /**
           * The username of the desired build's owner
           */
          owner: string
          /**
           * The slug of the desired build
           */
          slug: string
        }
      }
      responses: {
        /**
         * An ordered list of versions
         */
        "200": {
          "application/json": components["schemas"]["VersionsModel"]
        }
        /**
         * The request is malformed or invalid
         */
        "400": {
          "application/json": components["schemas"]["ProblemDetails"]
        }
        /**
         * The requested build does not exist
         */
        "404": {
          "application/json": components["schemas"]["ProblemDetails"]
        }
      }
    }
    post: {
      parameters: {
        path: {
          /**
           * The username of the desired build's owner
           */
          owner: string
          /**
           * The slug of the desired build
           */
          slug: string
        }
      }
      requestBody: {
        "application/json": components["schemas"]["CreateVersionRequest"]
        "text/json": components["schemas"]["CreateVersionRequest"]
        "application/*+json": components["schemas"]["CreateVersionRequest"]
      }
      responses: {
        /**
         * An ordered list of versions
         */
        "200": unknown
        /**
         * Success
         */
        "201": {
          "application/json": components["schemas"]["FullVersionModel"]
        }
        /**
         * The request is malformed or invalid
         */
        "400": {
          "application/json": components["schemas"]["ProblemDetails"]
        }
        /**
         * Unauthorized
         */
        "401": unknown
        /**
         * Forbidden
         */
        "403": unknown
        /**
         * The requested build does not exist
         */
        "404": {
          "application/json": components["schemas"]["ProblemDetails"]
        }
      }
    }
  }
  "/builds/{buildId}/cover": {
    get: {
      parameters: {
        path: {
          /**
           * The id of the desired build
           */
          buildId: string
        }
      }
      responses: {
        /**
         * The cover image of the requested build
         */
        "200": {
          "image/png": string
          "image/jpeg": string
          "image/gif": string
        }
        /**
         * The request is malformed or invalid
         */
        "400": {
          "image/png": components["schemas"]["ProblemDetails"]
          "image/jpeg": components["schemas"]["ProblemDetails"]
          "image/gif": components["schemas"]["ProblemDetails"]
        }
        /**
         * The requested build does not exist
         */
        "404": {
          "image/png": components["schemas"]["ProblemDetails"]
          "image/jpeg": components["schemas"]["ProblemDetails"]
          "image/gif": components["schemas"]["ProblemDetails"]
        }
      }
    }
  }
  "/payloads/{hash}": {
    get: {
      parameters: {
        path: {
          /**
           * The hash of the desired payload
           */
          hash: string
        }
        query: {
          /**
           * Specify whether to load the entire graph with all children or only the requested payload
           */
          include_children?: boolean
        }
      }
      responses: {
        /**
         * The details of the requested payload
         */
        "200": {
          "application/json": components["schemas"]["FullPayloadModel"]
        }
        /**
         * The request is malformed or invalid
         */
        "400": {
          "application/json": components["schemas"]["ProblemDetails"]
        }
        /**
         * The requested payload does not exist
         */
        "404": {
          "application/json": components["schemas"]["ProblemDetails"]
        }
      }
    }
  }
  "/payloads/{hash}/raw": {
    get: {
      parameters: {
        path: {
          /**
           * The hash of the desired payload
           */
          hash: string
        }
      }
      responses: {
        /**
         * The raw encoded blueprint string
         */
        "200": {
          "text/plain": string
        }
        /**
         * The request is malformed or invalid
         */
        "400": {
          "text/plain": components["schemas"]["ProblemDetails"]
        }
        /**
         * The requested payload does not exist
         */
        "404": {
          "text/plain": components["schemas"]["ProblemDetails"]
        }
      }
    }
  }
  "/payloads/{hash}/rendering/{type}": {
    get: {
      parameters: {
        path: {
          /**
           * The hash of the desired payload
           */
          hash: string
          /**
           * The desired type
           */
          type: "Full" | "Thumb"
        }
      }
      responses: {
        /**
         * The rendered blueprint image
         */
        "200": {
          "image/png": string
        }
        /**
         * The request is malformed or invalid
         */
        "400": {
          "image/png": components["schemas"]["ProblemDetails"]
        }
        /**
         * The requested payload does not exist
         */
        "404": {
          "image/png": components["schemas"]["ProblemDetails"]
        }
      }
    }
  }
  "/payloads": {
    put: {
      requestBody: {
        "application/json": components["schemas"]["CreatePayloadRequest"]
        "text/json": components["schemas"]["CreatePayloadRequest"]
        "application/*+json": components["schemas"]["CreatePayloadRequest"]
      }
      responses: {
        /**
         * Success
         */
        "200": {
          "application/json": components["schemas"]["CreatePayloadResult"]
        }
        /**
         * Bad Request
         */
        "400": {
          "application/json": components["schemas"]["ProblemDetails"]
        }
        /**
         * Unauthorized
         */
        "401": unknown
        /**
         * Forbidden
         */
        "403": unknown
      }
    }
  }
  "/rpc/render-markdown": {
    post: {
      requestBody: {
        "application/json": string
        "text/json": string
        "application/*+json": string
      }
      responses: {
        /**
         * The converted HTML
         */
        "200": {
          "text/plain": string
          "application/json": string
          "text/json": string
        }
        /**
         * The request is malformed or invalid
         */
        "400": unknown
        /**
         * Unauthorized
         */
        "401": unknown
        /**
         * Forbidden
         */
        "403": unknown
      }
    }
  }
  "/rpc/validate-username": {
    post: {
      requestBody: {
        "application/json": string
        "text/json": string
        "application/*+json": string
      }
      responses: {
        /**
         * The validation result
         */
        "200": {
          "text/plain": boolean
          "application/json": boolean
          "text/json": boolean
        }
      }
    }
  }
  "/rpc/validate-slug": {
    post: {
      requestBody: {
        "application/json": string
        "text/json": string
        "application/*+json": string
      }
      responses: {
        /**
         * The validation result
         */
        "200": {
          "text/plain": boolean
          "application/json": boolean
          "text/json": boolean
        }
        /**
         * Unauthorized
         */
        "401": unknown
        /**
         * Forbidden
         */
        "403": unknown
      }
    }
  }
  "/rpc/toggle-favorite": {
    post: {
      requestBody: {
        "application/json": string
        "text/json": string
        "application/*+json": string
      }
      responses: {
        /**
         * The build has been added or removed successfully
         */
        "200": unknown
        /**
         * Unauthorized
         */
        "401": unknown
        /**
         * Forbidden
         */
        "403": unknown
      }
    }
  }
  "/rpc/test-ping": {
    get: {
      responses: {
        /**
         * Success
         */
        "200": {
          "text/plain": string
          "application/json": string
          "text/json": string
        }
      }
    }
  }
  "/rpc/test-auth": {
    get: {
      responses: {
        /**
         * Success
         */
        "200": {
          "application/json": { [key: string]: string }
        }
        /**
         * Unauthorized
         */
        "401": unknown
        /**
         * Forbidden
         */
        "403": unknown
      }
    }
  }
  "/rpc/test-moderator": {
    get: {
      responses: {
        /**
         * Success
         */
        "200": {
          "application/json": { [key: string]: string }
        }
        /**
         * Unauthorized
         */
        "401": unknown
        /**
         * Forbidden
         */
        "403": unknown
      }
    }
  }
  "/rpc/test-admin": {
    get: {
      responses: {
        /**
         * Success
         */
        "200": {
          "application/json": { [key: string]: string }
        }
        /**
         * Unauthorized
         */
        "401": unknown
        /**
         * Forbidden
         */
        "403": unknown
      }
    }
  }
  "/users/{username}/builds": {
    get: {
      parameters: {
        path: {
          /**
           * The desired user's username
           */
          username: string
        }
        query: {
          /**
           * The desired page
           */
          page?: number
          /**
           * The desired field to sort the results
           */
          sort_field?: "Title" | "Created" | "Updated" | "Favorites"
          /**
           * The desired direction to sort the results
           */
          sort_direction?: "Asc" | "Desc"
          /**
           * An optional search term to filter the results by
           */
          q?: string
          /**
           * An optional comma-separated list of tags to filter the results by
           */
          tags?: string
          /**
           * An optional game version to filter the results by
           */
          version?: string
        }
      }
      responses: {
        /**
         * The paged, filtered and ordered list of matching builds
         */
        "200": {
          "application/json": components["schemas"]["BuildsModel"]
        }
        /**
         * The request is malformed or invalid
         */
        "400": {
          "application/json": components["schemas"]["ProblemDetails"]
        }
        /**
         * The requested user does not exist
         */
        "404": {
          "application/json": components["schemas"]["ProblemDetails"]
        }
      }
    }
  }
}

export interface operations {}

export interface components {
  schemas: {
    ProblemDetails: {
      type?: string | null
      title?: string | null
      status?: number | null
      detail?: string | null
      instance?: string | null
    } & { [key: string]: { [key: string]: any } }
    LinkModel: { href: string } & { [key: string]: { [key: string]: any } }
    GameIcon: { index: number; type: string; name: string }
    ThinUserModel: {
      /**
       * The user's username, also known as **slug**. It can consist only of latin alphanumeric characters, underscores and hyphens.
       * It is used in URLs like the user's profile or build pages.
       */
      username: string
    }
    ThinBuildModel: {
      _links: { [key: string]: components["schemas"]["LinkModel"] }
      /**
       * The slug is used in the build's URL and must be unique per user.
       * It can consist only of latin alphanumeric characters, underscores and hyphens.
       */
      slug: string
      /**
       * The timestamp in UTC of when the first version of the build was created.
       */
      created_at: string
      /**
       * The timestamp in UTC of when the build was last updated.
       */
      updated_at: string
      /**
       * The build's icons.
       */
      icons: components["schemas"]["GameIcon"][]
      /**
       * The title or display name of the build.
       */
      title: string
      owner: components["schemas"]["ThinUserModel"]
      /**
       * The game version that was used to create the the most recently added version of this build.
       */
      latest_game_version: string
      /**
       * The build's tags.
       */
      tags?: string[] | null
    }
    BuildsModel: {
      _links: { [key: string]: components["schemas"]["LinkModel"] }
      current_count: number
      total_count: number
      builds: components["schemas"]["ThinBuildModel"][]
    }
    CreateBuildRequest: {
      /**
       * The hash of payload that should be used to create this build version.
       * The payload must have been previously created.
       */
      hash: string
      /**
       * The title or display name of the build.
       */
      title: string
      /**
       * The build description in Markdown.
       */
      description?: string | null
      /**
       * An optional name for the version to be created.
       * If empty, the hash will be used as version name.
       */
      version_name?: string | null
      /**
       * An optional description for the version to be created.
       */
      version_description?: string | null
      /**
       * The build's tags.
       */
      tags: string[]
      /**
       * The build's icons.
       */
      icons: components["schemas"]["GameIcon"][]
      /**
       * The slug for the new build. It is used in the build's URL and must be unique per user.
       * It can consist only of latin alphanumeric characters, underscores and hyphens.
       */
      slug: string
    }
    UserModel: {
      /**
       * The user's username, also known as **slug**. It can consist only of latin alphanumeric characters, underscores and hyphens.
       * It is used in URLs like the user's profile or build pages.
       */
      username: string
      /**
       * The user's display name can **optionally** be set by a user. It is meant to be displayed across the site in place of the `username`.
       * If it is not set (`null`), the `username` should be displayed instead.
       */
      display_name?: string | null
      registered_at: string
    }
    DescriptionModel: { markdown: string; html: string }
    BlueprintEnvelopeModel: {
      /**
       * The blueprint type; either `blueprint` or `blueprint-book`.
       */
      type: string
      label?: string | null
      description?: string | null
      icons: components["schemas"]["GameIcon"][]
      entities: { [key: string]: number }
    }
    ThinPayloadModel: {
      _links: { [key: string]: components["schemas"]["LinkModel"] }
      /**
       * The `md5` hash of the payload's encoded blueprint string.
       */
      hash: string
      /**
       * The game version that was used to create the blueprint.
       */
      game_version: string
      /**
       * The raw encoded blueprint string for import in the game or other tools
       */
      encoded: string
      blueprint: components["schemas"]["BlueprintEnvelopeModel"]
    }
    FullVersionModel: {
      _links: { [key: string]: components["schemas"]["LinkModel"] }
      hash: string
      created_at: string
      name?: string | null
      description?: string | null
      payload: components["schemas"]["ThinPayloadModel"]
    }
    FullBuildModel: {
      _links: { [key: string]: components["schemas"]["LinkModel"] }
      /**
       * The slug is used in the build's URL and must be unique per user.
       * It can consist only of latin alphanumeric characters, underscores and hyphens.
       */
      slug: string
      /**
       * The timestamp in UTC of when the first version of the build was created.
       */
      created_at: string
      /**
       * The timestamp in UTC of when the build was last updated.
       */
      updated_at: string
      /**
       * The build's icons.
       */
      icons: components["schemas"]["GameIcon"][]
      /**
       * The title or display name of the build.
       */
      title: string
      owner: components["schemas"]["UserModel"]
      /**
       * The game version that was used to create the the most recently added version of this build.
       */
      latest_game_version: string
      /**
       * The build's tags.
       */
      tags?: string[] | null
      description?: components["schemas"]["DescriptionModel"]
      latest_version?: components["schemas"]["FullVersionModel"]
    }
    UsersModel: { count: number; users: components["schemas"]["UserModel"][] }
    ThinVersionModel: {
      _links: { [key: string]: components["schemas"]["LinkModel"] }
      hash: string
      created_at: string
      name?: string | null
      description?: string | null
    }
    VersionsModel: {
      count: number
      versions: components["schemas"]["ThinVersionModel"][]
    }
    CreateVersionRequest: {
      /**
       * The hash of payload that should be used to create this build version.
       * The payload must have been previously created.
       */
      hash: string
      /**
       * The title or display name of the build.
       */
      title: string
      /**
       * The build description in Markdown.
       */
      description?: string | null
      /**
       * An optional name for the version to be created.
       * If empty, the hash will be used as version name.
       */
      version_name?: string | null
      /**
       * An optional description for the version to be created.
       */
      version_description?: string | null
      /**
       * The build's tags.
       */
      tags: string[]
      /**
       * The build's icons.
       */
      icons: components["schemas"]["GameIcon"][]
      /**
       * The current (latest) version of the build. It must be specified to avoid concurrency issues.
       */
      expected_previous_version_id: string
    }
    FullPayloadModel: {
      _links: { [key: string]: components["schemas"]["LinkModel"] }
      /**
       * The `md5` hash of the payload's encoded blueprint string.
       */
      hash: string
      /**
       * The game version that was used to create the blueprint.
       */
      game_version: string
      /**
       * The raw encoded blueprint string for import in the game or other tools
       */
      encoded: string
      blueprint: components["schemas"]["BlueprintEnvelopeModel"]
      /**
       * If the payload is a `blueprint-book`, children contains all nested blueprints.
       * For payloads of type `blueprint`, this collection is empty.
       */
      children?: components["schemas"]["FullPayloadModel"][] | null
    }
    CreatePayloadRequest: {
      /**
       * The encoded blueprint string.
       */
      encoded: string
    }
    CreatePayloadResult: {
      /**
       * The hash of the primary (or parent) payload that was created.
       */
      hash: string
      /**
       * The hashes of all payloads that were created in this operation.
       */
      all_hashes: string[]
      /**
       * The tags that have been extracted for this payload.
       */
      extracted_tags: string[]
    }
  }
}

name: Build and push Docker image
on:
  push:
    branches:
      - main
    paths-ignore:
      - .*/**
      - deploy/**
      - infrastructure/**
      - scripts/**
      - README.md
  pull_request:
    branches:
      - main

env:
  version: "1.0.0-ci${{ github.run_id }}"

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx
          restore-keys: |
            ${{ runner.os }}-buildx

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CONTAINER_REGISTRY_TOKEN }}

      - name: Build and push - fbsr-wrapper
        uses: docker/build-push-action@v2
        with:
          context: ./fbsr-wrapper
          file: ./fbsr-wrapper/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/fbsr-wrapper:${{ env.version }}
            ghcr.io/${{ github.repository }}/fbsr-wrapper:ci
          cache-from: type=registry,ref=ghcr.io/${{ github.repository }}/fbsr-wrapper:ci
          cache-to: type=inline
          labels: |
            org.opencontainers.image.version=${{ env.version }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.ref.name=${{ github.ref }}

      - name: Build base image
        uses: docker/build-push-action@v2
        with:
          context: .
          target: build
          push: false
          load: true
          build-args: |
            version=${{ env.version }}
            build_branch=${{ github.ref }}
            build_sha=${{ github.sha }}
            build_uri=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          tags: factorio-tech/build:ci
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max

      - name: Run tests
        run: |
          docker run --rm factorio-tech/build:ci test \
            --no-restore --no-build --configuration Release \
            --verbosity normal --logger trx --filter Type=Fast

      - name: Build and push - worker
        uses: docker/build-push-action@v2
        with:
          context: .
          target: worker
          push: true
          build-args: |
            version=${{ env.version }}
            build_branch=${{ github.ref }}
            build_sha=${{ github.sha }}
            build_uri=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          tags: |
            ghcr.io/${{ github.repository }}/worker:${{ env.version }}
            ghcr.io/${{ github.repository }}/worker:ci
          labels: |
            org.opencontainers.image.version=${{ env.version }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.ref.name=${{ github.ref }}

      - name: Build and push - web
        uses: docker/build-push-action@v2
        with:
          context: .
          target: web
          push: true
          build-args: |
            version=${{ env.version }}
            build_branch=${{ github.ref }}
            build_sha=${{ github.sha }}
            build_uri=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          tags: |
            ghcr.io/${{ github.repository }}/web:${{ env.version }}
            ghcr.io/${{ github.repository }}/web:ci
          labels: |
            org.opencontainers.image.version=${{ env.version }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.ref.name=${{ github.ref }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: ${{ github.ref == 'refs/heads/main' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Login to AKS
        uses: azure/aks-set-context@v1
        with:
            creds: "${{ secrets.AZURE_CREDENTIALS }}"
            resource-group: ${{ secrets.AKS_RESOURCE_GROUP }}
            cluster-name: ${{ secrets.AKS_CLUSTER_NAME }}

      - name: Install Helm
        uses: azure/setup-helm@v1

      - name: Package Helm chart
        run: |
          helm package ./deploy \
            --version ${{ env.version }} \
            --app-version ${{ env.version }}

      - name: Deploy Helm chart to AKS
        run: |
          helm upgrade factorio-tech factorio-tech-${{ env.version }}.tgz \
            --install --atomic \
            --values deploy/values.yaml \
            --set-string postgres.database=${{ secrets.POSTGRES_DATABASE }} \
            --set-string postgres.username=${{ secrets.POSTGRES_USERNAME }} \
            --set-string postgres.password=${{ secrets.POSTGRES_PASSWORD }} \
            --set-string postgres.diskName=${{ secrets.POSTGRES_DISK_NAME }} \
            --set-string postgres.diskURI=${{ secrets.POSTGRES_DISK_URI }} \
            --set-string oAuthProviders[0].name=GitHub \
            --set-string oAuthProviders[0].clientId=${{ secrets.OAUTH_GITHUB_CLIENT_ID }} \
            --set-string oAuthProviders[0].clientSecret=${{ secrets.OAUTH_GITHUB_CLIENT_SECRET }} \
            --set-string oAuthProviders[1].name=Discord \
            --set-string oAuthProviders[1].clientId=${{ secrets.OAUTH_DISCORD_CLIENT_ID }} \
            --set-string oAuthProviders[1].clientSecret=${{ secrets.OAUTH_DISCORD_CLIENT_SECRET }}
